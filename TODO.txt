    TODO:
	- zrobić nowe ścianki DONE
    - przeczytać kod driverów , zrozumieć DONE
	- driver input przycisków nie blokujący DONE uff
	- płytke główną umieścić blisko pokrywki żeby rozluźnić kabelki DONE
    - wymysleć jak zrobić maszyne nie urzywając calli (chyba) DONE
     tak żeby nie zapisywały adresów powrotnych na stacku

    - pisać funkcje maszyny wirtualnej w wersji v1 DONE
    - na początku stacku 64 bajty pamieci tablicowej
    - dopisać DIV i MUL dla operacji unsigned 2Bx2B MORE OR LESS DONE

    - przemmysleć typy zmiennych    ( to na później jak napisze funkce do floatów i signed)
        w trybie natychmiastowym działać na jednym typie danych ( coś w sylu 4b float )
        w trybie odtwarzania kod wie do jakiego typu odnosi sie fcja i ją wywołuje

    - zrobić kod w wersji v0.2 <= to robić pierwsze !!!!
        - zabezpieczenia i BOOLE i może fcje
    
    - przemysleć funkcje 
        - zapis danych lokalnych (wskaźnikowo/stosowo)
        -constansy
    - funkcje do dostawanie sie do dowolnej komórki w pamieci
    - funkcje referencji i dereferencji

    


    Kod v0.1:   DONE
        -kod maszyne na raize sie wywołuje z maina ( potem pomysleć jak usunąć C) DONE
        Mode klawiatury1 (operacje na stosie):
        -wprowadzanie z klawiatury liczb na stack
            klawisze 1-9,0 uruchamiają funkcje dec_input która pobiera liczbe ze stacku
            mnoży ją razy 10 i dodaje nacisniety przycisk
            nastepnie odkłada ją na stack
            (libczy bez znaku dwubajtowe )
        -przeprowadzenie operacji DONE
            przyciski: ABCDF pobierają dwa ostanie fragmenty stacku
            oraz wykonują operacje

        # -push 0 na stack (2 bajty)  
        * - pop ze stacku
        f1-wyseitlenie stack poitera
        f2-wyswietlanie topu stacku
        
        
        Funkcje:
            DEC_INPUT, ADD, SUB, DIV, MUL, PUSH, POP, SHOW

    Kod v0.2:
        -maszyna działa w trybach.
            Na razie zaimplementować tryb natychmiastowy, w którym po wykonaniu
            funkcji pokazuje sie top stosu w drugim cyklu           DONE
        - zabespieczenie przed wyjsciem stosu poza jego ramy        DONE
            rejestry limit_up  r4:r5 -limit down r6:r7-
            EDIT: tylko limit_up (czyli początek stosu, w danym momęcie), max_stosu stały 
            zabezpieczają nie tylko stos ale i dane lokalne funkcji na przykład
        - funkcje boolowe też zwracające 16 bit EQ LT GT AND OR NOT XOR PRAWIE DONE
        - funcja NEG (dopełnienie dwójek) (kiedy indziej)
            za czym idzie reprezantacja danych signed
        - funkcje do operacji na ekranie
        - funkcje do operacji na pamięci EEPROM
        - ziszczone marzenia o inpucie w przerwaniu
        - różne metody adresowania w funkcjach pop i push
        
            

    Zamysł:
         1) Mszyna wirtualna będąca zestawen funkcji
         2) Stane maszyny jest stos zajmujący cały ram + rejestry r2..r15
         3) Każda funkcja rozumie stan stosu 
         4) Każda funkcja może zmienić stos z 
            jednego stanu zrozumiałego w inny
         5) Funckje mogą być wywołane na trzy sposoby:
            -przycisk na klawiaturze (lub ich kombinacja, maszyna stanów)
            -byte w epromie (lub sekwencja)
            -tekst z rs232
         6) sposoby powyrzej mogą być tłumaczone z jednego na drugi
            przy urzyciu odpowiedniej funkcji
         7) Funkcje obejmują:
            Peryferia:
                - Klawiatura
                - Ekram
                - EEPROM 
                - rs232  
            Systemowe:
                - alokacja/dealokacja na stosie
                - ONP
                - edytor kodu
                - tlumaczenia reprezentacji funkcji
                - system plikow
                - komunikacja tekstowa
                

            
            
            

    DODATKOWE NOTATKI

        - sczytywanie stanu przysiku w przerwaniu timera
        - informacje do kolejki eventów i tablicy stanu rzeczywistego
        - edytor kodu
            jako odnoga AVM zamiast wykonywać komendy przycisków 
            na początku przechowuje je w ramie 
            potem kompresuje i przechowuje w epromie
            może działać na zasadzie sptronicowanie kiedy bedzie kończył sie ram
            to wymaga algorytmu kompresującego i dekompresującego komendy
            i algorytmu stronnicowania
        - górne przyciski jako zmana mode klawiatury
            pod różnymi modami będą sie kryły różne fcje klawiszy
            to daje razem 16 klawiszy razy 4 mody czyli 64 funkcje
            czyli w zapisie binarnym 6 bitów 
            pozostałe 2 bity mogą być użyte do oznaczania stałych i innych bajtów specjalnych
            w zapisanym programie
        
         
    Jesli porgramy mają dostęp do wszystkich funckcji 
    AVM to w takim razie program moze uruchomić inny proggram :)



    BUGI I OPTYMALIZACJE:
        -OPT- przy wyborze funkcji sprawdzanie przepełnienia 
        stosu i pobranie argumentów wywali przed wywołania funkcji
        -BUG- checki stosu wylatują poza nawias
        -BUG- mode klawiatury nie wraca od poprzedniego