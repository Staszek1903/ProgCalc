
./bin/out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000066e  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027c0  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dae  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003c52  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003c64  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000048c  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000044e  00000000  00000000  0000412c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0000457a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017a  00000000  00000000  00004597  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	1f c3       	rjmp	.+1598   	; 0x650 <__vector_8>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0f d3       	rcall	.+1566   	; 0x652 <main>
  34:	1a c3       	rjmp	.+1588   	; 0x66a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <binprint>:
*  r24 - value to prints
*  r23 - adress on lcd screen to prints
*/
 .global binprint
binprint:
    push r22
  38:	6f 93       	push	r22
    push r23
  3a:	7f 93       	push	r23
    push r24
  3c:	8f 93       	push	r24

    push r24        ; setting adress
  3e:	8f 93       	push	r24
    mov r24,r23
  40:	87 2f       	mov	r24, r23
    rcall LCD_setDDaddr
  42:	e4 d2       	rcall	.+1480   	; 0x60c <LCD_setDDaddr>
    pop r24
  44:	8f 91       	pop	r24

    ldi r22, 9  ; iterator
  46:	69 e0       	ldi	r22, 0x09	; 9

00000048 <binprint_loop>:
    binprint_loop:  ; putting every bit onto the stack in ascii form
        dec r22
  48:	6a 95       	dec	r22
        breq binprint_loop_ext
  4a:	31 f0       	breq	.+12     	; 0x58 <binprint_loop_ext>
        ldi r23, '0'
  4c:	70 e3       	ldi	r23, 0x30	; 48
        sbrc r24, 0
  4e:	80 fd       	sbrc	r24, 0
        ldi r23, '1'
  50:	71 e3       	ldi	r23, 0x31	; 49
        push r23
  52:	7f 93       	push	r23
        lsr r24
  54:	86 95       	lsr	r24
        rjmp binprint_loop
  56:	f8 cf       	rjmp	.-16     	; 0x48 <binprint_loop>

00000058 <binprint_loop_ext>:

    binprint_loop_ext:
    ldi r22, 9
  58:	69 e0       	ldi	r22, 0x09	; 9

0000005a <binprint_loop2>:
    binprint_loop2:     ; reading chars from a spac and print
        dec r22
  5a:	6a 95       	dec	r22
        breq binprint_loop2_ext
  5c:	19 f0       	breq	.+6      	; 0x64 <binprint_loop2_ext>
        pop r24
  5e:	8f 91       	pop	r24
        rcall LCD_data
  60:	89 d2       	rcall	.+1298   	; 0x574 <LCD_data>
        rjmp binprint_loop2
  62:	fb cf       	rjmp	.-10     	; 0x5a <binprint_loop2>

00000064 <binprint_loop2_ext>:
    binprint_loop2_ext:

    pop r24
  64:	8f 91       	pop	r24
    pop r23
  66:	7f 91       	pop	r23
    pop r22
  68:	6f 91       	pop	r22
    ret
  6a:	08 95       	ret

0000006c <hexprint_table>:
  6c:	30 31       	cpi	r19, 0x10	; 16
  6e:	32 33       	cpi	r19, 0x32	; 50
  70:	34 35       	cpi	r19, 0x54	; 84
  72:	36 37       	cpi	r19, 0x76	; 118
  74:	38 39       	cpi	r19, 0x98	; 152
  76:	41 42       	sbci	r20, 0x21	; 33
  78:	43 44       	sbci	r20, 0x43	; 67
  7a:	45 46       	sbci	r20, 0x65	; 101
  7c:	47 00       	.word	0x0047	; ????

0000007e <hexprint>:
hexprint_table:
.asciz "0123456789ABCDEFG"

.global hexprint
hexprint:
    push r24
  7e:	8f 93       	push	r24
    push r23
  80:	7f 93       	push	r23
    push r22
  82:	6f 93       	push	r22
    push zl
  84:	ef 93       	push	r30
    push zh
  86:	ff 93       	push	r31

    push r24        ; setting LCD address
  88:	8f 93       	push	r24
    mov r24,r23
  8a:	87 2f       	mov	r24, r23
    rcall LCD_setDDaddr
  8c:	bf d2       	rcall	.+1406   	; 0x60c <LCD_setDDaddr>
    pop r24
  8e:	8f 91       	pop	r24

    mov r23, r24    ; separating nibbles
  90:	78 2f       	mov	r23, r24
    mov r22, r24
  92:	68 2f       	mov	r22, r24
    swap r23
  94:	72 95       	swap	r23
    andi r23, 0x0f  
  96:	7f 70       	andi	r23, 0x0F	; 15
    andi r22, 0x0f
  98:	6f 70       	andi	r22, 0x0F	; 15

    ldi zl, lo8(hexprint_table) ; loading char from pm and print
  9a:	ec e6       	ldi	r30, 0x6C	; 108
    ldi zh, hi8(hexprint_table)
  9c:	f0 e0       	ldi	r31, 0x00	; 0
    add zl, r23
  9e:	e7 0f       	add	r30, r23
    adc zh, r1
  a0:	f1 1d       	adc	r31, r1
    lpm r24, z
  a2:	84 91       	lpm	r24, Z
    rcall LCD_data
  a4:	67 d2       	rcall	.+1230   	; 0x574 <LCD_data>

    ldi zl, lo8(hexprint_table) ; dito
  a6:	ec e6       	ldi	r30, 0x6C	; 108
    ldi zh, hi8(hexprint_table)
  a8:	f0 e0       	ldi	r31, 0x00	; 0
    add zl, r22
  aa:	e6 0f       	add	r30, r22
    adc zh, r1
  ac:	f1 1d       	adc	r31, r1
    lpm r24, z
  ae:	84 91       	lpm	r24, Z
    rcall LCD_data
  b0:	61 d2       	rcall	.+1218   	; 0x574 <LCD_data>

    pop zl
  b2:	ef 91       	pop	r30
    pop zh
  b4:	ff 91       	pop	r31
    pop r22
  b6:	6f 91       	pop	r22
    pop r23
  b8:	7f 91       	pop	r23
    pop r24
  ba:	8f 91       	pop	r24

  bc:	08 95       	ret

000000be <strlpm>:
* zl, zh - pm location
* NOTE: to load z use lo8, hi8 macros (pm_lo8, pm_hi8 doesn't work)
*/
.global strlpm
strlpm: 
    push r24
  be:	8f 93       	push	r24

000000c0 <strlpm_loop>:

    strlpm_loop:
        lpm r24, z+
  c0:	85 91       	lpm	r24, Z+
        st x+, r24
  c2:	8d 93       	st	X+, r24
        tst r24
  c4:	88 23       	and	r24, r24
        breq strlpm_end
  c6:	09 f0       	breq	.+2      	; 0xca <strlpm_end>
        rjmp strlpm_loop
  c8:	fb cf       	rjmp	.-10     	; 0xc0 <strlpm_loop>

000000ca <strlpm_end>:
    strlpm_end:

    pop r24
  ca:	8f 91       	pop	r24
    ret
  cc:	08 95       	ret

000000ce <tostr1B>:
/*
* 1 byte for now r24 destination pointer in x
*/
.global tostr1B
tostr1B:  
    push r24
  ce:	8f 93       	push	r24
    push r23
  d0:	7f 93       	push	r23
    push r22
  d2:	6f 93       	push	r22
    push xl
  d4:	af 93       	push	r26
    push xh
  d6:	bf 93       	push	r27

    clr r23
  d8:	77 27       	eor	r23, r23

000000da <tostr1B_loop>:

    tostr1B_loop:
        ldi r22, 10
  da:	6a e0       	ldi	r22, 0x0A	; 10
        tst r24
  dc:	88 23       	and	r24, r24
        breq tostr1B_loop_ext
  de:	29 f0       	breq	.+10     	; 0xea <tostr1B_loop_ext>
        rcall div1B
  e0:	37 d0       	rcall	.+110    	; 0x150 <div1B>
        subi r22, -48
  e2:	60 5d       	subi	r22, 0xD0	; 208
        push r22
  e4:	6f 93       	push	r22
        inc r23
  e6:	73 95       	inc	r23
        rjmp tostr1B_loop
  e8:	f8 cf       	rjmp	.-16     	; 0xda <tostr1B_loop>

000000ea <tostr1B_loop_ext>:
    tostr1B_loop_ext:
        tst r23
  ea:	77 23       	and	r23, r23
        brne tostr1B_loop2
  ec:	11 f4       	brne	.+4      	; 0xf2 <tostr1B_loop2>
        ldi r24, 48
  ee:	80 e3       	ldi	r24, 0x30	; 48
        st x+, r24
  f0:	8d 93       	st	X+, r24

000000f2 <tostr1B_loop2>:
    tostr1B_loop2:
        tst r23
  f2:	77 23       	and	r23, r23
        breq tostr1B_ext
  f4:	21 f0       	breq	.+8      	; 0xfe <tostr1B_ext>
        dec r23
  f6:	7a 95       	dec	r23
        pop r22
  f8:	6f 91       	pop	r22
        st x+, r22
  fa:	6d 93       	st	X+, r22
        rjmp tostr1B_loop2
  fc:	fa cf       	rjmp	.-12     	; 0xf2 <tostr1B_loop2>

000000fe <tostr1B_ext>:
    tostr1B_ext:
    st x+, r1
  fe:	1d 92       	st	X+, r1

    pop xh
 100:	bf 91       	pop	r27
    pop xl
 102:	af 91       	pop	r26
    pop r22
 104:	6f 91       	pop	r22
    pop r23
 106:	7f 91       	pop	r23
    pop r24
 108:	8f 91       	pop	r24
    ret
 10a:	08 95       	ret

0000010c <tostr2B>:
*  converting r24:r25 into char string at x
*/

.global tostr2B 
tostr2B:
    push r24
 10c:	8f 93       	push	r24
    push r25
 10e:	9f 93       	push	r25
    push r23
 110:	7f 93       	push	r23
    push r22
 112:	6f 93       	push	r22
    push xl
 114:	af 93       	push	r26
    push xh
 116:	bf 93       	push	r27

    clr r23
 118:	77 27       	eor	r23, r23

0000011a <tostr2B_loop>:
    tostr2B_loop:
        ldi r22,10
 11a:	6a e0       	ldi	r22, 0x0A	; 10
        cp r24,r1
 11c:	81 15       	cp	r24, r1
        cpc r25,r1
 11e:	91 05       	cpc	r25, r1
        breq tostr2B_loop_ext
 120:	29 f0       	breq	.+10     	; 0x12c <tostr2B_loop_ext>
        rcall div2B
 122:	2e d0       	rcall	.+92     	; 0x180 <div2B>
        subi r22, -48
 124:	60 5d       	subi	r22, 0xD0	; 208
        push r22
 126:	6f 93       	push	r22
        inc r23
 128:	73 95       	inc	r23
        rjmp tostr2B_loop
 12a:	f7 cf       	rjmp	.-18     	; 0x11a <tostr2B_loop>

0000012c <tostr2B_loop_ext>:
    tostr2B_loop_ext:
        tst r23
 12c:	77 23       	and	r23, r23
        brne tostr2B_loop2
 12e:	11 f4       	brne	.+4      	; 0x134 <tostr2B_loop2>
        ldi r24, 48
 130:	80 e3       	ldi	r24, 0x30	; 48
        st x+, r24
 132:	8d 93       	st	X+, r24

00000134 <tostr2B_loop2>:
    tostr2B_loop2:
        tst r23
 134:	77 23       	and	r23, r23
        breq tostr2B_ext
 136:	21 f0       	breq	.+8      	; 0x140 <tostr2B_ext>
        dec r23
 138:	7a 95       	dec	r23
        pop r22
 13a:	6f 91       	pop	r22
        st x+, r22
 13c:	6d 93       	st	X+, r22
        rjmp tostr2B_loop2
 13e:	fa cf       	rjmp	.-12     	; 0x134 <tostr2B_loop2>

00000140 <tostr2B_ext>:
    tostr2B_ext:
    st x+, r1
 140:	1d 92       	st	X+, r1
    
    pop xh
 142:	bf 91       	pop	r27
    pop xl
 144:	af 91       	pop	r26
    pop r22
 146:	6f 91       	pop	r22
    pop r23
 148:	7f 91       	pop	r23
    pop r25
 14a:	9f 91       	pop	r25
    pop r24
 14c:	8f 91       	pop	r24
    ret
 14e:	08 95       	ret

00000150 <div1B>:
temp = 23
result = 21
iter = 20
.global div1B
div1B:
    push temp
 150:	7f 93       	push	r23
    push result
 152:	5f 93       	push	r21

    clr temp
 154:	77 27       	eor	r23, r23
    clr result
 156:	55 27       	eor	r21, r21

    ldi iter, 8
 158:	48 e0       	ldi	r20, 0x08	; 8

0000015a <div1B_loop>:
    div1B_loop:
        clc ; clear carry
 15a:	88 94       	clc
        rol dividend ; rotate divident into temp
 15c:	88 1f       	adc	r24, r24
        rol temp
 15e:	77 1f       	adc	r23, r23
        brcs div1B_sub  ; if bit roled out of temp subrtract divisor
 160:	10 f0       	brcs	.+4      	; 0x166 <div1B_sub>
        cp temp, divisor;
 162:	76 17       	cp	r23, r22
        brlo div1B_nosub ; if temp >= divisor then subtract divisor
 164:	18 f0       	brcs	.+6      	; 0x16c <div1B_nosub>

00000166 <div1B_sub>:
        div1B_sub:
            sub temp, divisor ; subtract divisor
 166:	76 1b       	sub	r23, r22
            sec     ;set carry for result
 168:	08 94       	sec
            rjmp div1B_res
 16a:	01 c0       	rjmp	.+2      	; 0x16e <div1B_res>

0000016c <div1B_nosub>:
        div1B_nosub:
            clc ; clear cassy for result
 16c:	88 94       	clc

0000016e <div1B_res>:
        div1B_res:
        rol result  ; rotate carry into result    
 16e:	55 1f       	adc	r21, r21

        dec iter    ; after 8 loops end
 170:	4a 95       	dec	r20
        breq div1B_end
 172:	09 f0       	breq	.+2      	; 0x176 <div1B_end>
        rjmp div1B_loop
 174:	f2 cf       	rjmp	.-28     	; 0x15a <div1B_loop>

00000176 <div1B_end>:
    div1B_end:

    mov dividend, result
 176:	85 2f       	mov	r24, r21
    mov divisor, temp
 178:	67 2f       	mov	r22, r23

    pop result
 17a:	5f 91       	pop	r21
    pop temp
 17c:	7f 91       	pop	r23
    ret
 17e:	08 95       	ret

00000180 <div2B>:
resl = 20
resh = 21
iter = 19
.global div2B
div2B:
    push temp
 180:	7f 93       	push	r23
    push resl
 182:	4f 93       	push	r20
    push resh
 184:	5f 93       	push	r21
    push iter
 186:	3f 93       	push	r19

    clr resl
 188:	44 27       	eor	r20, r20
    clr resh
 18a:	55 27       	eor	r21, r21
    clr temp
 18c:	77 27       	eor	r23, r23

    ldi iter, 16
 18e:	30 e1       	ldi	r19, 0x10	; 16

00000190 <div2B_loop>:
    div2B_loop:
        clc
 190:	88 94       	clc
        rol divl
 192:	88 1f       	adc	r24, r24
        rol divh
 194:	99 1f       	adc	r25, r25
        rol temp
 196:	77 1f       	adc	r23, r23
        brcs div2B_sub
 198:	10 f0       	brcs	.+4      	; 0x19e <div2B_sub>
        cp temp, divisor
 19a:	76 17       	cp	r23, r22
        brlo div2B_nosub
 19c:	18 f0       	brcs	.+6      	; 0x1a4 <div2B_nosub>

0000019e <div2B_sub>:
        div2B_sub:
            sub temp, divisor
 19e:	76 1b       	sub	r23, r22
            sec
 1a0:	08 94       	sec
            rjmp div2B_res
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <div2B_res>

000001a4 <div2B_nosub>:
        div2B_nosub:
            clc
 1a4:	88 94       	clc

000001a6 <div2B_res>:
        div2B_res:
        rol resl
 1a6:	44 1f       	adc	r20, r20
        rol resh
 1a8:	55 1f       	adc	r21, r21

        dec iter
 1aa:	3a 95       	dec	r19
        breq div2B_end
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <div2B_end>
        rjmp div2B_loop
 1ae:	f0 cf       	rjmp	.-32     	; 0x190 <div2B_loop>

000001b0 <div2B_end>:
    div2B_end:

    movw divl, resl
 1b0:	ca 01       	movw	r24, r20
    mov divisor, temp
 1b2:	67 2f       	mov	r22, r23

    pop iter
 1b4:	3f 91       	pop	r19
    pop resh
 1b6:	5f 91       	pop	r21
    pop resl
 1b8:	4f 91       	pop	r20
    pop temp
 1ba:	7f 91       	pop	r23
    ret
 1bc:	08 95       	ret

000001be <delay3B>:
 * r24 - argument
 */

.global delay3B
delay3B:
    push r24
 1be:	8f 93       	push	r24
    push r25
 1c0:	9f 93       	push	r25
    push r26
 1c2:	af 93       	push	r26
    push r27
 1c4:	bf 93       	push	r27

    mov r27,r24
 1c6:	b8 2f       	mov	r27, r24

    clr r24
 1c8:	88 27       	eor	r24, r24
    clr r25
 1ca:	99 27       	eor	r25, r25
    clr r26
 1cc:	aa 27       	eor	r26, r26

000001ce <delay3B_loop>:

    delay3B_loop:
    inc r24
 1ce:	83 95       	inc	r24
    brne delay3B_loop
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <delay3B_loop>
    inc r25
 1d2:	93 95       	inc	r25
    brne delay3B_loop
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <delay3B_loop>
    inc r26
 1d6:	a3 95       	inc	r26
    cp r26, r27
 1d8:	ab 17       	cp	r26, r27
    brne delay3B_loop
 1da:	c9 f7       	brne	.-14     	; 0x1ce <delay3B_loop>

    pop r27
 1dc:	bf 91       	pop	r27
    pop r26
 1de:	af 91       	pop	r26
    pop r25
 1e0:	9f 91       	pop	r25
    pop r24
 1e2:	8f 91       	pop	r24

    ret
 1e4:	08 95       	ret

000001e6 <waitforinput>:
 * waitforinput
 * waits for input
 */
.global waitforinput
waitforinput:
    push r24
 1e6:	8f 93       	push	r24

000001e8 <waitforinput_loop>:
    waitforinput_loop:
    rcall kp_getkey
 1e8:	7a d1       	rcall	.+756    	; 0x4de <kp_getkey>
    tst r24
 1ea:	88 23       	and	r24, r24
    breq waitforinput_loop
 1ec:	e9 f3       	breq	.-6      	; 0x1e8 <waitforinput_loop>
    ldi r24, 30
 1ee:	8e e1       	ldi	r24, 0x1E	; 30
    rcall delay3B
 1f0:	e6 df       	rcall	.-52     	; 0x1be <delay3B>
    pop r24
 1f2:	8f 91       	pop	r24
    ret
 1f4:	08 95       	ret

000001f6 <se_err_msg>:
.asciz "STACK OVERFLOW"

.global empty_stack_error
empty_stack_error:
    
    rcall LCD_clear
 1f6:	53 54       	subi	r21, 0x43	; 67
 1f8:	41 43       	sbci	r20, 0x31	; 49
 1fa:	4b 20       	and	r4, r11
 1fc:	45 4d       	sbci	r20, 0xD5	; 213
 1fe:	50 54       	subi	r21, 0x40	; 64
 200:	59 00       	.word	0x0059	; ????
	...

00000203 <so_err_msg>:
 203:	53 54       	subi	r21, 0x43	; 67
 205:	41 43       	sbci	r20, 0x31	; 49
 207:	4b 20       	and	r4, r11
 209:	4f 56       	subi	r20, 0x6F	; 111
 20b:	45 52       	subi	r20, 0x25	; 37
 20d:	46 4c       	sbci	r20, 0xC6	; 198
 20f:	4f 57       	subi	r20, 0x7F	; 127
	...

00000212 <empty_stack_error>:
 212:	f7 d1       	rcall	.+1006   	; 0x602 <LCD_clear>
    loadw_z(se_err_msg)
 214:	e6 ef       	ldi	r30, 0xF6	; 246
 216:	f1 e0       	ldi	r31, 0x01	; 1
    loadw_x(TEMP_RAM)
 218:	af e1       	ldi	r26, 0x1F	; 31
 21a:	b4 e0       	ldi	r27, 0x04	; 4
    loadw_24(TEMP_RAM)
 21c:	8f e1       	ldi	r24, 0x1F	; 31
 21e:	94 e0       	ldi	r25, 0x04	; 4
    rcall strlpm
 220:	4e df       	rcall	.-356    	; 0xbe <strlpm>
    rcall LCD_print
 222:	e6 d1       	rcall	.+972    	; 0x5f0 <LCD_print>

    rcall waitforinput
 224:	e0 df       	rcall	.-64     	; 0x1e6 <waitforinput>
rjmp vm_loop
 226:	99 c0       	rjmp	.+306    	; 0x35a <vm_loop>

00000228 <stack_overflow_error>:
    

.global stack_overflow_error
stack_overflow_error:
    loadw_24(TEMP_RAM -1)       ; load first stack bottom into stack pointer to reset
 228:	8e e1       	ldi	r24, 0x1E	; 30
 22a:	94 e0       	ldi	r25, 0x04	; 4
    out STPTL, r24
 22c:	8d bf       	out	0x3d, r24	; 61
    out STPTH, r25
 22e:	9e bf       	out	0x3e, r25	; 62
    movw stack_bottomL, r24
 230:	2c 01       	movw	r4, r24

    rcall LCD_clear
 232:	e7 d1       	rcall	.+974    	; 0x602 <LCD_clear>
    loadw_z(so_err_msg)
 234:	e3 e0       	ldi	r30, 0x03	; 3
 236:	f2 e0       	ldi	r31, 0x02	; 2
    loadw_x(TEMP_RAM)
 238:	af e1       	ldi	r26, 0x1F	; 31
 23a:	b4 e0       	ldi	r27, 0x04	; 4
    loadw_24(TEMP_RAM)
 23c:	8f e1       	ldi	r24, 0x1F	; 31
 23e:	94 e0       	ldi	r25, 0x04	; 4
    rcall strlpm
 240:	3e df       	rcall	.-388    	; 0xbe <strlpm>
    rcall LCD_print
 242:	d6 d1       	rcall	.+940    	; 0x5f0 <LCD_print>

    rcall waitforinput
 244:	d0 df       	rcall	.-96     	; 0x1e6 <waitforinput>
rjmp vm_loop
 246:	89 c0       	rjmp	.+274    	; 0x35a <vm_loop>

00000248 <calc_push>:
    brlo stack_overflow_error
 .endm

.global calc_push
calc_push:
    check_stackptr_top
 248:	8d b7       	in	r24, 0x3d	; 61
 24a:	9e b7       	in	r25, 0x3e	; 62
 24c:	82 36       	cpi	r24, 0x62	; 98
 24e:	91 05       	cpc	r25, r1
 250:	58 f3       	brcs	.-42     	; 0x228 <stack_overflow_error>

    push r1
 252:	1f 92       	push	r1
    push r1
 254:	1f 92       	push	r1
rjmp vm_loop
 256:	81 c0       	rjmp	.+258    	; 0x35a <vm_loop>

00000258 <calc_pop>:

.global calc_pop
calc_pop:
    check_stackptr_bottom
 258:	8d b7       	in	r24, 0x3d	; 61
 25a:	9e b7       	in	r25, 0x3e	; 62
 25c:	84 15       	cp	r24, r4
 25e:	95 05       	cpc	r25, r5
 260:	c0 f6       	brcc	.-80     	; 0x212 <empty_stack_error>

    pop r0
 262:	0f 90       	pop	r0
    pop r0
 264:	0f 90       	pop	r0
rjmp vm_loop
 266:	79 c0       	rjmp	.+242    	; 0x35a <vm_loop>

00000268 <show_top>:
/*
 * shows two byte unsigned number on top of the stack
 */
.global show_top
show_top:
    check_stackptr_bottom
 268:	8d b7       	in	r24, 0x3d	; 61
 26a:	9e b7       	in	r25, 0x3e	; 62
 26c:	84 15       	cp	r24, r4
 26e:	95 05       	cpc	r25, r5
 270:	80 f6       	brcc	.-96     	; 0x212 <empty_stack_error>

    rcall LCD_clear
 272:	c7 d1       	rcall	.+910    	; 0x602 <LCD_clear>
    in xl, _SFR_IO_ADDR(SPL)
 274:	ad b7       	in	r26, 0x3d	; 61
    in xh, _SFR_IO_ADDR(SPH)
 276:	be b7       	in	r27, 0x3e	; 62
    adiw x, 1
 278:	11 96       	adiw	r26, 0x01	; 1
    ld r24, x+
 27a:	8d 91       	ld	r24, X+
    ld r25, x
 27c:	9c 91       	ld	r25, X
    ldi xl, 0xff
 27e:	af ef       	ldi	r26, 0xFF	; 255
    ldi xh, 0x00
 280:	b0 e0       	ldi	r27, 0x00	; 0
    rcall tostr2B
 282:	44 df       	rcall	.-376    	; 0x10c <tostr2B>
    movw r24,xl
 284:	cd 01       	movw	r24, r26
    rcall LCD_print
 286:	b4 d1       	rcall	.+872    	; 0x5f0 <LCD_print>
rjmp vm_loop
 288:	68 c0       	rjmp	.+208    	; 0x35a <vm_loop>

0000028a <show_sp>:
/*
 * shows stack pointer value
 */
.global show_sp
show_sp:
    mov r3, r1 ; clr vm_state to not show top after this func
 28a:	31 2c       	mov	r3, r1
    rcall LCD_clear
 28c:	ba d1       	rcall	.+884    	; 0x602 <LCD_clear>
    in r24, _SFR_IO_ADDR(SPL)
 28e:	8d b7       	in	r24, 0x3d	; 61
    in r25, _SFR_IO_ADDR(SPH)
 290:	9e b7       	in	r25, 0x3e	; 62
    ldi xl, 0xff
 292:	af ef       	ldi	r26, 0xFF	; 255
    ldi xh, 0x00
 294:	b0 e0       	ldi	r27, 0x00	; 0
    rcall tostr2B
 296:	3a df       	rcall	.-396    	; 0x10c <tostr2B>
    movw r24,xl
 298:	cd 01       	movw	r24, r26
    rcall LCD_print
 29a:	aa d1       	rcall	.+852    	; 0x5f0 <LCD_print>
rjmp vm_loop
 29c:	5e c0       	rjmp	.+188    	; 0x35a <vm_loop>

0000029e <dec_input>:
.global dec_input
dec_input:
    ;check_stackptr_bottom
    ;check_stackptr_top

    pop r24
 29e:	8f 91       	pop	r24
    pop r25
 2a0:	9f 91       	pop	r25

    ldi r23, 10     
 2a2:	7a e0       	ldi	r23, 0x0A	; 10
    mul r23, r24
 2a4:	78 9f       	mul	r23, r24
    mov r20, r0
 2a6:	40 2d       	mov	r20, r0
    mov r21, r1
 2a8:	51 2d       	mov	r21, r1
    mul r23, r25
 2aa:	79 9f       	mul	r23, r25
    add r21, r0     ; possible overflow !
 2ac:	50 0d       	add	r21, r0

    mov r24, r2
 2ae:	82 2d       	mov	r24, r2
    rcall kp_getchar
 2b0:	eb d0       	rcall	.+470    	; 0x488 <kp_getchar>
    subi r24, 48
 2b2:	80 53       	subi	r24, 0x30	; 48
    clr r25
 2b4:	99 27       	eor	r25, r25
    mov r1, r25
 2b6:	19 2e       	mov	r1, r25
    add r20, r24
 2b8:	48 0f       	add	r20, r24
    adc r21, r1
 2ba:	51 1d       	adc	r21, r1

    push r21
 2bc:	5f 93       	push	r21
    push r20
 2be:	4f 93       	push	r20
rjmp vm_loop 
 2c0:	4c c0       	rjmp	.+152    	; 0x35a <vm_loop>

000002c2 <calc_add>:

.global calc_add
calc_add:
    pop r24
 2c2:	8f 91       	pop	r24
    pop r25
 2c4:	9f 91       	pop	r25
    pop r22
 2c6:	6f 91       	pop	r22
    pop r23
 2c8:	7f 91       	pop	r23

    add r24, r22
 2ca:	86 0f       	add	r24, r22
    adc r25, r23
 2cc:	97 1f       	adc	r25, r23

    push r25
 2ce:	9f 93       	push	r25
    push r24
 2d0:	8f 93       	push	r24
rjmp vm_loop
 2d2:	43 c0       	rjmp	.+134    	; 0x35a <vm_loop>

000002d4 <calc_sub>:

.global calc_sub
calc_sub:
    pop r24
 2d4:	8f 91       	pop	r24
    pop r25
 2d6:	9f 91       	pop	r25
    pop r22
 2d8:	6f 91       	pop	r22
    pop r23
 2da:	7f 91       	pop	r23

    sub r22, r24
 2dc:	68 1b       	sub	r22, r24
    sbc r23, r25
 2de:	79 0b       	sbc	r23, r25

    push r23
 2e0:	7f 93       	push	r23
    push r22
 2e2:	6f 93       	push	r22
    rjmp vm_loop
 2e4:	3a c0       	rjmp	.+116    	; 0x35a <vm_loop>

000002e6 <calc_mul>:

.global calc_mul
calc_mul:
    pop r24
 2e6:	8f 91       	pop	r24
    pop r25
 2e8:	9f 91       	pop	r25
    pop r22
 2ea:	6f 91       	pop	r22
    pop r23
 2ec:	7f 91       	pop	r23

    mul r24, r22
 2ee:	86 9f       	mul	r24, r22
    movw r26, r0
 2f0:	d0 01       	movw	r26, r0
    mul r24, r23
 2f2:	87 9f       	mul	r24, r23
    add r27, r0
 2f4:	b0 0d       	add	r27, r0
    mul r23, r25
 2f6:	79 9f       	mul	r23, r25
    add r27, r0
 2f8:	b0 0d       	add	r27, r0

    clr r24
 2fa:	88 27       	eor	r24, r24
    mov r1, r24
 2fc:	18 2e       	mov	r1, r24

    push r27
 2fe:	bf 93       	push	r27
    push r26
 300:	af 93       	push	r26

rjmp vm_loop
 302:	2b c0       	rjmp	.+86     	; 0x35a <vm_loop>

00000304 <calc_div>:

.global calc_div
calc_div:
    pop r22
 304:	6f 91       	pop	r22
    pop r23
 306:	7f 91       	pop	r23
    pop r24
 308:	8f 91       	pop	r24
    pop r25
 30a:	9f 91       	pop	r25

    rcall div2B
 30c:	39 df       	rcall	.-398    	; 0x180 <div2B>

    push r25
 30e:	9f 93       	push	r25
    push r24
 310:	8f 93       	push	r24

rjmp vm_loop
 312:	23 c0       	rjmp	.+70     	; 0x35a <vm_loop>

00000314 <no_func>:

.global no_func
no_func:
rjmp vm_loop
 314:	22 c0       	rjmp	.+68     	; 0x35a <vm_loop>

00000316 <powitansko>:
.asciz "press any key"

.global calc_vm
.global vm_loop
calc_vm:
    loadw_z(powitansko) ;load message adress in pm
 316:	70 72       	andi	r23, 0x20	; 32
 318:	65 73       	andi	r22, 0x35	; 53
 31a:	73 20       	and	r7, r3
 31c:	61 6e       	ori	r22, 0xE1	; 225
 31e:	79 20       	and	r7, r9
 320:	6b 65       	ori	r22, 0x5B	; 91
 322:	79 00       	.word	0x0079	; ????

00000324 <calc_vm>:
 324:	e6 e1       	ldi	r30, 0x16	; 22
 326:	f3 e0       	ldi	r31, 0x03	; 3
    loadw_x(TEMP_RAM)   ;load dest adress
 328:	af e1       	ldi	r26, 0x1F	; 31
 32a:	b4 e0       	ldi	r27, 0x04	; 4
    loadw_24(TEMP_RAM)  
 32c:	8f e1       	ldi	r24, 0x1F	; 31
 32e:	94 e0       	ldi	r25, 0x04	; 4
    rcall strlpm        ;load message into ram
 330:	c6 de       	rcall	.-628    	; 0xbe <strlpm>
    rcall LCD_print     ;print message
 332:	5e d1       	rcall	.+700    	; 0x5f0 <LCD_print>

    loadw_24(TEMP_RAM -1)       ; load first stack bottom into stack pointer
 334:	8e e1       	ldi	r24, 0x1E	; 30
 336:	94 e0       	ldi	r25, 0x04	; 4
    out _SFR_IO_ADDR(SPL), r24
 338:	8d bf       	out	0x3d, r24	; 61
    out _SFR_IO_ADDR(SPH), r25
 33a:	9e bf       	out	0x3e, r25	; 62
    movw stack_bottomL, r24
 33c:	2c 01       	movw	r4, r24
    
    ldi xl, 0xff
 33e:	af ef       	ldi	r26, 0xFF	; 255
    ldi xh, 0x00
 340:	b0 e0       	ldi	r27, 0x00	; 0
    in r24, STPTL
 342:	8d b7       	in	r24, 0x3d	; 61
    in r25, STPTH
 344:	9e b7       	in	r25, 0x3e	; 62
    rcall tostr2B
 346:	e2 de       	rcall	.-572    	; 0x10c <tostr2B>
    ldi r24, 0x40
 348:	80 e4       	ldi	r24, 0x40	; 64
    rcall LCD_setDDaddr
 34a:	60 d1       	rcall	.+704    	; 0x60c <LCD_setDDaddr>
    ser r24
 34c:	8f ef       	ldi	r24, 0xFF	; 255
    clr r25
 34e:	99 27       	eor	r25, r25
    rcall LCD_print
 350:	4f d1       	rcall	.+670    	; 0x5f0 <LCD_print>

    clr r25
 352:	99 27       	eor	r25, r25
    mov last_key, r25
 354:	29 2e       	mov	r2, r25
    mov vm_state, r25
 356:	39 2e       	mov	r3, r25
    mov r1, r25
 358:	19 2e       	mov	r1, r25

0000035a <vm_loop>:

    vm_loop:

        cp vm_state,r1
 35a:	31 14       	cp	r3, r1
        breq vm_k ; dont output if state not raised 
 35c:	11 f0       	breq	.+4      	; 0x362 <vm_k>
             mov vm_state, r1    ; clear state
 35e:	31 2c       	mov	r3, r1
             rjmp show_top
 360:	83 cf       	rjmp	.-250    	; 0x268 <show_top>

00000362 <vm_k>:

        vm_k:
        ldi r24, 2
 362:	82 e0       	ldi	r24, 0x02	; 2
        rcall delay3B
 364:	2c df       	rcall	.-424    	; 0x1be <delay3B>
        rcall kp_getkey ; reading keypad state
 366:	bb d0       	rcall	.+374    	; 0x4de <kp_getkey>
        cp r2, r24      ; is same as previous
 368:	28 16       	cp	r2, r24
        breq vm_loop    ; continue if is same
 36a:	b9 f3       	breq	.-18     	; 0x35a <vm_loop>
        mov r2, r24     ; save new state if diferent
 36c:	28 2e       	mov	r2, r24
        tst r2          ; check zero
 36e:	22 20       	and	r2, r2
        breq vm_loop    ; continue if zero, no button pressed
 370:	a1 f3       	breq	.-24     	; 0x35a <vm_loop>

        ldi zl, pm_lo8(functions_table)
 372:	e0 ec       	ldi	r30, 0xC0	; 192
        ldi zh, pm_hi8(functions_table)
 374:	f1 e0       	ldi	r31, 0x01	; 1
        add zl, r2
 376:	e2 0d       	add	r30, r2
        adc zh, r1
 378:	f1 1d       	adc	r31, r1
        inc vm_state ; raise state for prinitng stack
 37a:	33 94       	inc	r3
        ijmp
 37c:	09 94       	ijmp

    rjmp vm_loop
 37e:	ed cf       	rjmp	.-38     	; 0x35a <vm_loop>

00000380 <functions_table>:

functions_table:
    rjmp no_func
 380:	c9 cf       	rjmp	.-110    	; 0x314 <no_func>

    rjmp dec_input
 382:	8d cf       	rjmp	.-230    	; 0x29e <dec_input>
    rjmp dec_input
 384:	8c cf       	rjmp	.-232    	; 0x29e <dec_input>
    rjmp dec_input
 386:	8b cf       	rjmp	.-234    	; 0x29e <dec_input>
    rjmp calc_add
 388:	9c cf       	rjmp	.-200    	; 0x2c2 <calc_add>

    rjmp dec_input
 38a:	89 cf       	rjmp	.-238    	; 0x29e <dec_input>
    rjmp dec_input
 38c:	88 cf       	rjmp	.-240    	; 0x29e <dec_input>
    rjmp dec_input
 38e:	87 cf       	rjmp	.-242    	; 0x29e <dec_input>
    rjmp calc_sub
 390:	a1 cf       	rjmp	.-190    	; 0x2d4 <calc_sub>

    rjmp dec_input
 392:	85 cf       	rjmp	.-246    	; 0x29e <dec_input>
    rjmp dec_input
 394:	84 cf       	rjmp	.-248    	; 0x29e <dec_input>
    rjmp dec_input
 396:	83 cf       	rjmp	.-250    	; 0x29e <dec_input>
    rjmp calc_mul
 398:	a6 cf       	rjmp	.-180    	; 0x2e6 <calc_mul>

    rjmp calc_pop
 39a:	5e cf       	rjmp	.-324    	; 0x258 <calc_pop>
    rjmp dec_input
 39c:	80 cf       	rjmp	.-256    	; 0x29e <dec_input>
    rjmp calc_push
 39e:	54 cf       	rjmp	.-344    	; 0x248 <calc_push>
    rjmp calc_div
 3a0:	b1 cf       	rjmp	.-158    	; 0x304 <calc_div>

    rjmp show_sp
 3a2:	73 cf       	rjmp	.-282    	; 0x28a <show_sp>
    rjmp show_top
 3a4:	61 cf       	rjmp	.-318    	; 0x268 <show_top>
    rjmp no_func
 3a6:	b6 cf       	rjmp	.-148    	; 0x314 <no_func>
    rjmp no_func
 3a8:	b5 cf       	rjmp	.-150    	; 0x314 <no_func>

000003aa <TWI_init>:
tw_data		= _SFR_IO_ADDR(TWDR)


 .global TWI_init
 TWI_init:
	push r24 //save used registers
 3aa:	8f 93       	push	r24

	clr r24
 3ac:	88 27       	eor	r24, r24
	out tw_status,r24
 3ae:	81 b9       	out	0x01, r24	; 1
	ldi r24, 0x0c
 3b0:	8c e0       	ldi	r24, 0x0C	; 12
	out tw_bitrate, r24
 3b2:	80 b9       	out	0x00, r24	; 0
	ldi r24, (1<<TWEN)
 3b4:	84 e0       	ldi	r24, 0x04	; 4
	out tw_control,r24
 3b6:	86 bf       	out	0x36, r24	; 54

	pop r24 // retrieve used registers
 3b8:	8f 91       	pop	r24
	ret
 3ba:	08 95       	ret

000003bc <TWI_start>:

.global TWI_start	//transmit start condition
TWI_start:
	push r24 //save used registers
 3bc:	8f 93       	push	r24

	ldi r24, (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)
 3be:	84 ea       	ldi	r24, 0xA4	; 164
	out tw_control,r24
 3c0:	86 bf       	out	0x36, r24	; 54

000003c2 <TWI_start_w>:
	TWI_start_w:	// wait for transmision end
		in r24,tw_control
 3c2:	86 b7       	in	r24, 0x36	; 54
		sbrs r24,TWINT
 3c4:	87 ff       	sbrs	r24, 7
		rjmp TWI_start_w
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <TWI_start_w>

000003c8 <TWI_start_ack>:
	TWI_start_ack:	// wait for slave acknoweledgement
		in r24, tw_status
 3c8:	81 b1       	in	r24, 0x01	; 1
		andi r24, 0xF8
 3ca:	88 7f       	andi	r24, 0xF8	; 248
		cpi r24,0x10
 3cc:	80 31       	cpi	r24, 0x10	; 16
		breq TWI_start_ret
 3ce:	11 f0       	breq	.+4      	; 0x3d4 <TWI_start_ret>
		cpi r24,0x08
 3d0:	88 30       	cpi	r24, 0x08	; 8
		brne TWI_start_ack
 3d2:	d1 f7       	brne	.-12     	; 0x3c8 <TWI_start_ack>

000003d4 <TWI_start_ret>:
	TWI_start_ret:

	pop r24 // retrieve used registers
 3d4:	8f 91       	pop	r24
	ret
 3d6:	08 95       	ret

000003d8 <TWI_stop>:

.global TWI_stop	// transmit stop condition
TWI_stop:
	push r24 //save used registers
 3d8:	8f 93       	push	r24

	ldi r24, (1<<TWINT)|(1<<TWSTO)|(1<<TWEN)
 3da:	84 e9       	ldi	r24, 0x94	; 148
	out tw_control, r24
 3dc:	86 bf       	out	0x36, r24	; 54

000003de <TWI_stop_w>:
	TWI_stop_w:			// wait for stop condition transmitted
		in r24, tw_control
 3de:	86 b7       	in	r24, 0x36	; 54
		sbrc r24, TWSTO
 3e0:	84 fd       	sbrc	r24, 4
		rjmp TWI_stop_w
 3e2:	fd cf       	rjmp	.-6      	; 0x3de <TWI_stop_w>

	pop r24 // retrieve used registers
 3e4:	8f 91       	pop	r24
	ret
 3e6:	08 95       	ret

000003e8 <TWI_write>:

.global TWI_write
TWI_write:
	push r24
 3e8:	8f 93       	push	r24

	out tw_data, r24
 3ea:	83 b9       	out	0x03, r24	; 3
	ldi r24, (1<<TWINT) | (1<<TWEN)
 3ec:	84 e8       	ldi	r24, 0x84	; 132
	out tw_control, r24
 3ee:	86 bf       	out	0x36, r24	; 54

000003f0 <TWI_write_w>:
	TWI_write_w:
		in r24, tw_control
 3f0:	86 b7       	in	r24, 0x36	; 54
		sbrs r24, TWINT
 3f2:	87 ff       	sbrs	r24, 7
		rjmp TWI_write_w
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <TWI_write_w>
	in r24, tw_status
 3f6:	81 b1       	in	r24, 0x01	; 1
	andi r24, 0xF8
 3f8:	88 7f       	andi	r24, 0xF8	; 248

	pop r24
 3fa:	8f 91       	pop	r24
	ret
 3fc:	08 95       	ret

000003fe <TWI_read>:

.global TWI_read
TWI_read:
	tst r24
 3fe:	88 23       	and	r24, r24
	breq TWI_noack
 400:	11 f0       	breq	.+4      	; 0x406 <TWI_noack>
		ldi r24, (1 << TWINT) | (1 << TWEN) | (1 << TWEA)
 402:	84 ec       	ldi	r24, 0xC4	; 196
		rjmp TWI_setack
 404:	01 c0       	rjmp	.+2      	; 0x408 <TWI_setack>

00000406 <TWI_noack>:
	TWI_noack:
		ldi r24, (1 << TWINT) | (1 << TWEN)
 406:	84 e8       	ldi	r24, 0x84	; 132

00000408 <TWI_setack>:
	TWI_setack:
		out tw_control, r24
 408:	86 bf       	out	0x36, r24	; 54

0000040a <TWI_read_w>:
	TWI_read_w:
		in r24, tw_control
 40a:	86 b7       	in	r24, 0x36	; 54
		sbrs r24, TWINT
 40c:	87 ff       	sbrs	r24, 7
		rjmp TWI_read_w
 40e:	fd cf       	rjmp	.-6      	; 0x40a <TWI_read_w>
		
	in r24, tw_data
 410:	83 b1       	in	r24, 0x03	; 3
	ret
 412:	08 95       	ret

00000414 <EEPROM_write>:

.extern delay_5_ms
.global EEPROM_write ;(char device, uint16_t address, char data)
EEPROM_write:
	push r24
 414:	8f 93       	push	r24
	
	lsl r24
 416:	88 0f       	add	r24, r24
	ori r24,0xA0
 418:	80 6a       	ori	r24, 0xA0	; 160
	rcall TWI_start
 41a:	d0 df       	rcall	.-96     	; 0x3bc <TWI_start>
	rcall TWI_write
 41c:	e5 df       	rcall	.-54     	; 0x3e8 <TWI_write>
	mov r24,r23
 41e:	87 2f       	mov	r24, r23
	rcall TWI_write
 420:	e3 df       	rcall	.-58     	; 0x3e8 <TWI_write>
	mov r24,r22
 422:	86 2f       	mov	r24, r22
	rcall TWI_write
 424:	e1 df       	rcall	.-62     	; 0x3e8 <TWI_write>
	mov r24,r20
 426:	84 2f       	mov	r24, r20
	rcall TWI_write
 428:	df df       	rcall	.-66     	; 0x3e8 <TWI_write>
	rcall TWI_stop
 42a:	d6 df       	rcall	.-84     	; 0x3d8 <TWI_stop>

	pop r24
 42c:	8f 91       	pop	r24
	ret
 42e:	08 95       	ret

00000430 <EEPROM_read>:
	print_int(TWI_read(-1));
	print_int(TWI_read(0));
	LCD_print("KEK");
	TWI_stop();*/

	lsl r24
 430:	88 0f       	add	r24, r24
	ori r24, 0xA0
 432:	80 6a       	ori	r24, 0xA0	; 160
	rcall TWI_start
 434:	c3 df       	rcall	.-122    	; 0x3bc <TWI_start>

	push r24
 436:	8f 93       	push	r24
	rcall TWI_write
 438:	d7 df       	rcall	.-82     	; 0x3e8 <TWI_write>
	mov r24, r23
 43a:	87 2f       	mov	r24, r23
	rcall TWI_write
 43c:	d5 df       	rcall	.-86     	; 0x3e8 <TWI_write>
	mov r24, r22
 43e:	86 2f       	mov	r24, r22
	rcall TWI_write
 440:	d3 df       	rcall	.-90     	; 0x3e8 <TWI_write>
	rcall TWI_start
 442:	bc df       	rcall	.-136    	; 0x3bc <TWI_start>
	pop r24
 444:	8f 91       	pop	r24
	
	ori r24, 0x01
 446:	81 60       	ori	r24, 0x01	; 1
	rcall TWI_write
 448:	cf df       	rcall	.-98     	; 0x3e8 <TWI_write>
	ldi r24,0
 44a:	80 e0       	ldi	r24, 0x00	; 0
	rcall TWI_read
 44c:	d8 df       	rcall	.-80     	; 0x3fe <TWI_read>
	ret
 44e:	08 95       	ret

00000450 <kp_init>:
ddr_D = _SFR_IO_ADDR(DDRD)
pin_B = _SFR_IO_ADDR(PINB)

.global kp_init
kp_init:
	push r24
 450:	8f 93       	push	r24

	in r24, ddr_C	//setting c0..c3 for output
 452:	84 b3       	in	r24, 0x14	; 20
	ori r24, 0xf
 454:	8f 60       	ori	r24, 0x0F	; 15
	out ddr_C, r24
 456:	84 bb       	out	0x14, r24	; 20

	in r24, port_C
 458:	85 b3       	in	r24, 0x15	; 21
	ori r24, 0xf
 45a:	8f 60       	ori	r24, 0x0F	; 15
	out port_C, r24
 45c:	85 bb       	out	0x15, r24	; 21

	in r24, ddr_B	//clearing b4..b7 for input
 45e:	87 b3       	in	r24, 0x17	; 23
	andi r24, 0x0f
 460:	8f 70       	andi	r24, 0x0F	; 15
	out ddr_B, r24
 462:	87 bb       	out	0x17, r24	; 23

	in r24, port_B	//b4..b7 pull_ups
 464:	88 b3       	in	r24, 0x18	; 24
	ori r24, 0xf0
 466:	80 6f       	ori	r24, 0xF0	; 240
	out port_B, r24
 468:	88 bb       	out	0x18, r24	; 24

	sbi ddr_D, 4	//setting d4 for output
 46a:	8c 9a       	sbi	0x11, 4	; 17
	sbi port_D, 4
 46c:	94 9a       	sbi	0x12, 4	; 18
	
	pop r24
 46e:	8f 91       	pop	r24
	ret
 470:	08 95       	ret

00000472 <kp_tab>:
 472:	20 31       	cpi	r18, 0x10	; 16
 474:	32 33       	cpi	r19, 0x32	; 50
 476:	41 34       	cpi	r20, 0x41	; 65
 478:	35 36       	cpi	r19, 0x65	; 101
 47a:	42 37       	cpi	r20, 0x72	; 114
 47c:	38 39       	cpi	r19, 0x98	; 152
 47e:	43 2a       	or	r4, r19
 480:	30 23       	and	r19, r16
 482:	44 45       	sbci	r20, 0x54	; 84
 484:	46 47       	sbci	r20, 0x76	; 118
 486:	48 00       	.word	0x0048	; ????

00000488 <kp_getchar>:

kp_tab:
.asciz " 123A456B789C*0#DEFGH"
.global kp_getchar
kp_getchar:
	push zh
 488:	ff 93       	push	r31
	push zl
 48a:	ef 93       	push	r30

	ldi zh, hi8(kp_tab)
 48c:	f4 e0       	ldi	r31, 0x04	; 4
	ldi zl, lo8(kp_tab)
 48e:	e2 e7       	ldi	r30, 0x72	; 114
	add zl, r24
 490:	e8 0f       	add	r30, r24
	adc zh, r1
 492:	f1 1d       	adc	r31, r1

	lpm r24,z
 494:	84 91       	lpm	r24, Z
	
	pop zl
 496:	ef 91       	pop	r30
	pop zh
 498:	ff 91       	pop	r31
	ret
 49a:	08 95       	ret

0000049c <kp_set_row>:

kp_set_row:			// sets active row on port_C, argument r24 value: 0..5 (5 - non row set)
	push r24
 49c:	8f 93       	push	r24
	push r23
 49e:	7f 93       	push	r23

	ldi r23, 0b11111110
 4a0:	7e ef       	ldi	r23, 0xFE	; 254

000004a2 <kp_set_row_loop>:
	kp_set_row_loop:		// rotating 0 bit to match row address
		dec r24
 4a2:	8a 95       	dec	r24
		brlt kp_set_row_loop_end
 4a4:	14 f0       	brlt	.+4      	; 0x4aa <kp_set_row_loop_end>
		rol r23
 4a6:	77 1f       	adc	r23, r23
		rjmp kp_set_row_loop
 4a8:	fc cf       	rjmp	.-8      	; 0x4a2 <kp_set_row_loop>

000004aa <kp_set_row_loop_end>:
	kp_set_row_loop_end:

	sbi port_D, 4
 4aa:	94 9a       	sbi	0x12, 4	; 18
	sbrs r23, 4
 4ac:	74 ff       	sbrs	r23, 4
	cbi port_D, 4
 4ae:	94 98       	cbi	0x12, 4	; 18

	in r24, port_C	//setting C adress
 4b0:	85 b3       	in	r24, 0x15	; 21
	andi r23, 0x0f;
 4b2:	7f 70       	andi	r23, 0x0F	; 15
	andi r24, 0xf0;
 4b4:	80 7f       	andi	r24, 0xF0	; 240
	or r24,r23		//merging nibbles of two registers
 4b6:	87 2b       	or	r24, r23
	out port_C, r24
 4b8:	85 bb       	out	0x15, r24	; 21

	pop r23
 4ba:	7f 91       	pop	r23
	pop r24
 4bc:	8f 91       	pop	r24
	ret
 4be:	08 95       	ret

000004c0 <kp_get_row>:

kp_get_row:	// reads current row and returns first down button in r24 (0..3)
	clr r24
 4c0:	88 27       	eor	r24, r24
	push r23
 4c2:	7f 93       	push	r23

	in r23, pin_B
 4c4:	76 b3       	in	r23, 0x16	; 22
	swap r23
 4c6:	72 95       	swap	r23
	ori r23, 0xf0
 4c8:	70 6f       	ori	r23, 0xF0	; 240
	com r23
 4ca:	70 95       	com	r23
	breq kp_get_row_ret
 4cc:	31 f0       	breq	.+12     	; 0x4da <kp_get_row_ret>

000004ce <kp_get_row_loop>:

	kp_get_row_loop:
		sbrc r23, 0
 4ce:	70 fd       	sbrc	r23, 0
		rjmp kp_get_row_loop_end //if last bit=0 then button is pressed -> end loop
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <kp_get_row_loop_end>
		inc r24
 4d2:	83 95       	inc	r24
		lsr r23
 4d4:	76 95       	lsr	r23
		rjmp kp_get_row_loop
 4d6:	fb cf       	rjmp	.-10     	; 0x4ce <kp_get_row_loop>

000004d8 <kp_get_row_loop_end>:
	kp_get_row_loop_end:
	inc r24
 4d8:	83 95       	inc	r24

000004da <kp_get_row_ret>:

	kp_get_row_ret:
	pop r23
 4da:	7f 91       	pop	r23
	ret
 4dc:	08 95       	ret

000004de <kp_getkey>:
/*	ldi r24, 0
	rcall kp_set_row
	rcall kp_get_row
	ret
*/
	push r23
 4de:	7f 93       	push	r23
	push r22
 4e0:	6f 93       	push	r22

	clr r23 // <--- row adrres
 4e2:	77 27       	eor	r23, r23
	clr r22 // row multiplier 
 4e4:	66 27       	eor	r22, r22

000004e6 <kp_getkey_loop>:
	
	kp_getkey_loop:
		mov r24, r23
 4e6:	87 2f       	mov	r24, r23
		rcall kp_set_row	//setting row adres
 4e8:	d9 df       	rcall	.-78     	; 0x49c <kp_set_row>
		rcall kp_get_row	// reading row
 4ea:	ea df       	rcall	.-44     	; 0x4c0 <kp_get_row>
		tst r24
 4ec:	88 23       	and	r24, r24
		brne kp_getkey_loop_end	// if result not empty jmp to dinal computation
 4ee:	29 f4       	brne	.+10     	; 0x4fa <kp_getkey_loop_end>
		subi r22, -4 		// adding 4 by subtracting -4 xd
 4f0:	6c 5f       	subi	r22, 0xFC	; 252
		inc r23
 4f2:	73 95       	inc	r23

		cpi r23, 6			// if row address exided 6 jmp to return
 4f4:	76 30       	cpi	r23, 0x06	; 6
		brne kp_getkey_loop
 4f6:	b9 f7       	brne	.-18     	; 0x4e6 <kp_getkey_loop>
		rjmp kp_getkey_ret
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <kp_getkey_ret>

000004fa <kp_getkey_loop_end>:
	kp_getkey_loop_end:

	add r24, r22	// adding number of button to row multiplier
 4fa:	86 0f       	add	r24, r22

000004fc <kp_getkey_ret>:

	kp_getkey_ret:
	pop r22
 4fc:	6f 91       	pop	r22
	pop r23
 4fe:	7f 91       	pop	r23
	ret
 500:	08 95       	ret

00000502 <LCD_delay>:
 LCD_E = 5
 LCD_RW = 6
 LCD_RS = 7

 LCD_delay:
	push r24
 502:	8f 93       	push	r24
	push r25
 504:	9f 93       	push	r25
	
	clr r24
 506:	88 27       	eor	r24, r24
	clr r25
 508:	99 27       	eor	r25, r25

0000050a <LCD_delay_loop>:
	LCD_delay_loop:
	inc r24
 50a:	83 95       	inc	r24
	brne LCD_delay_loop
 50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_delay_loop>
	inc r25
 50e:	93 95       	inc	r25
	brne LCD_delay_loop
 510:	e1 f7       	brne	.-8      	; 0x50a <LCD_delay_loop>

	pop r25
 512:	9f 91       	pop	r25
	pop r24
 514:	8f 91       	pop	r24
	ret
 516:	08 95       	ret

00000518 <LCD_wait>:

LCD_wait:
	push r24
 518:	8f 93       	push	r24

0000051a <LCD_wait_w>:
LCD_wait_w:
	rcall LCD_getaddr
 51a:	4b d0       	rcall	.+150    	; 0x5b2 <LCD_getaddr>
	andi r24, 0x80
 51c:	80 78       	andi	r24, 0x80	; 128
	brne LCD_wait_w
 51e:	e9 f7       	brne	.-6      	; 0x51a <LCD_wait_w>

	pop r24
 520:	8f 91       	pop	r24
	ret
 522:	08 95       	ret

00000524 <LCD_init>:

.global LCD_init
LCD_init:
	push r24
 524:	8f 93       	push	r24

	in r24, ddr_B
 526:	87 b3       	in	r24, 0x17	; 23
	sbr r24, 0x0f
 528:	8f 60       	ori	r24, 0x0F	; 15
	out ddr_B,r24	;ustawiam magistrale jako wyjscie
 52a:	87 bb       	out	0x17, r24	; 23

	in r24, ddr_D
 52c:	81 b3       	in	r24, 0x11	; 17
	sbr r24, 0b11100000
 52e:	80 6e       	ori	r24, 0xE0	; 224
	out ddr_D,r24	; ustwawiam sterowanie jako wyjscie
 530:	81 bb       	out	0x11, r24	; 17

	in r24, port_B
 532:	88 b3       	in	r24, 0x18	; 24
	cbr r24, 0x0f
 534:	80 7f       	andi	r24, 0xF0	; 240
	out port_B,r24	;czyszcze magistrale
 536:	88 bb       	out	0x18, r24	; 24

	in r24, port_D
 538:	82 b3       	in	r24, 0x12	; 18
	cbr r24, 0b11100000
 53a:	8f 71       	andi	r24, 0x1F	; 31
	out port_D,r24  ;czyszcze sterowanie
 53c:	82 bb       	out	0x12, r24	; 18

	rcall LCD_delay
 53e:	e1 df       	rcall	.-62     	; 0x502 <LCD_delay>
	
	in r24, port_B
 540:	88 b3       	in	r24, 0x18	; 24
	andi r24, 0xf0
 542:	80 7f       	andi	r24, 0xF0	; 240
	ori r24, 0x2
 544:	82 60       	ori	r24, 0x02	; 2
	out port_B, r24
 546:	88 bb       	out	0x18, r24	; 24
	sbi port_D, LCD_E
 548:	95 9a       	sbi	0x12, 5	; 18
	nop
 54a:	00 00       	nop
	nop
 54c:	00 00       	nop
	nop
 54e:	00 00       	nop
	cbi port_D,LCD_E
 550:	95 98       	cbi	0x12, 5	; 18
	
	rcall LCD_wait
 552:	e2 df       	rcall	.-60     	; 0x518 <LCD_wait>
	ldi r24, 0b0101000
 554:	88 e2       	ldi	r24, 0x28	; 40
	rcall LCD_command
 556:	05 d0       	rcall	.+10     	; 0x562 <LCD_command>

	rcall LCD_wait
 558:	df df       	rcall	.-66     	; 0x518 <LCD_wait>
	ldi r24, 0b01100
 55a:	8c e0       	ldi	r24, 0x0C	; 12
	rcall LCD_command
 55c:	02 d0       	rcall	.+4      	; 0x562 <LCD_command>

	pop r24
 55e:	8f 91       	pop	r24
	ret
 560:	08 95       	ret

00000562 <LCD_command>:


.global LCD_command
LCD_command:
	push r24
 562:	8f 93       	push	r24
	push r25
 564:	9f 93       	push	r25
	
	rcall LCD_wait
 566:	d8 df       	rcall	.-80     	; 0x518 <LCD_wait>
	
	in r25, ddr_B
 568:	97 b3       	in	r25, 0x17	; 23
	sbr r25, 0x0f
 56a:	9f 60       	ori	r25, 0x0F	; 15
	out ddr_B, r25
 56c:	97 bb       	out	0x17, r25	; 23

	cbi port_D, LCD_RW
 56e:	96 98       	cbi	0x12, 6	; 18
	cbi port_D, LCD_RS
 570:	97 98       	cbi	0x12, 7	; 18
	rjmp LCD_send
 572:	08 c0       	rjmp	.+16     	; 0x584 <LCD_send>

00000574 <LCD_data>:

.global LCD_data
LCD_data:
	push r24
 574:	8f 93       	push	r24
	push r25
 576:	9f 93       	push	r25

	rcall LCD_wait
 578:	cf df       	rcall	.-98     	; 0x518 <LCD_wait>

	in r25, ddr_B
 57a:	97 b3       	in	r25, 0x17	; 23
	sbr r25, 0x0f
 57c:	9f 60       	ori	r25, 0x0F	; 15
	out ddr_B, r25
 57e:	97 bb       	out	0x17, r25	; 23

	cbi port_D, LCD_RW
 580:	96 98       	cbi	0x12, 6	; 18
	sbi port_D, LCD_RS
 582:	97 9a       	sbi	0x12, 7	; 18

00000584 <LCD_send>:

LCD_send:
	push r24
 584:	8f 93       	push	r24
	swap r24
 586:	82 95       	swap	r24
	cbr r24, 0xf0
 588:	8f 70       	andi	r24, 0x0F	; 15

	in r25, port_B
 58a:	98 b3       	in	r25, 0x18	; 24
	cbr r25, 0x0f
 58c:	90 7f       	andi	r25, 0xF0	; 240
	or r24,r25
 58e:	89 2b       	or	r24, r25
	out port_B, r24
 590:	88 bb       	out	0x18, r24	; 24
	sbi port_D, LCD_E
 592:	95 9a       	sbi	0x12, 5	; 18
	nop
 594:	00 00       	nop
	nop
 596:	00 00       	nop
	nop
 598:	00 00       	nop
	cbi port_D,LCD_E
 59a:	95 98       	cbi	0x12, 5	; 18

	pop r24
 59c:	8f 91       	pop	r24
	or r24,r25
 59e:	89 2b       	or	r24, r25
	out port_B, r24
 5a0:	88 bb       	out	0x18, r24	; 24
	sbi port_D,LCD_E
 5a2:	95 9a       	sbi	0x12, 5	; 18
	nop
 5a4:	00 00       	nop
	nop
 5a6:	00 00       	nop
	nop
 5a8:	00 00       	nop
	cbi port_D,LCD_E
 5aa:	95 98       	cbi	0x12, 5	; 18

	pop r25
 5ac:	9f 91       	pop	r25
	pop r24
 5ae:	8f 91       	pop	r24
	ret
 5b0:	08 95       	ret

000005b2 <LCD_getaddr>:

.global LCD_getaddr
LCD_getaddr:
	in r24, ddr_B
 5b2:	87 b3       	in	r24, 0x17	; 23
	cbr r24, 0x0f
 5b4:	80 7f       	andi	r24, 0xF0	; 240
	out ddr_B,r24
 5b6:	87 bb       	out	0x17, r24	; 23

	sbi port_D, LCD_RW
 5b8:	96 9a       	sbi	0x12, 6	; 18
	cbi port_D, LCD_RS
 5ba:	97 98       	cbi	0x12, 7	; 18
	rjmp LCD_recieve
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <LCD_recieve>

000005be <LCD_getchar>:

.global LCD_getchar
LCD_getchar:
	in r24, ddr_B
 5be:	87 b3       	in	r24, 0x17	; 23
	cbr r24, 0x0f
 5c0:	80 7f       	andi	r24, 0xF0	; 240
	out ddr_B,r24
 5c2:	87 bb       	out	0x17, r24	; 23

	sbi port_D, LCD_RW
 5c4:	96 9a       	sbi	0x12, 6	; 18
	sbi port_D, LCD_RS
 5c6:	97 9a       	sbi	0x12, 7	; 18

000005c8 <LCD_recieve>:
	
LCD_recieve:
	push r25	//saving used registers (r24 is return)
 5c8:	9f 93       	push	r25

	sbi port_D, LCD_E
 5ca:	95 9a       	sbi	0x12, 5	; 18
	nop
 5cc:	00 00       	nop
	nop
 5ce:	00 00       	nop
	nop
 5d0:	00 00       	nop
	in r24, pin_B
 5d2:	86 b3       	in	r24, 0x16	; 22
	cbi port_D,LCD_E
 5d4:	95 98       	cbi	0x12, 5	; 18
	cbr r24, 0xf0
 5d6:	8f 70       	andi	r24, 0x0F	; 15
	swap r24
 5d8:	82 95       	swap	r24
	nop
 5da:	00 00       	nop
	nop
 5dc:	00 00       	nop

	sbi port_D,LCD_E
 5de:	95 9a       	sbi	0x12, 5	; 18
	nop
 5e0:	00 00       	nop
	nop
 5e2:	00 00       	nop
	in r25, pin_B
 5e4:	96 b3       	in	r25, 0x16	; 22
	cbi port_D,LCD_E
 5e6:	95 98       	cbi	0x12, 5	; 18
	cbr r25, 0xf0
 5e8:	9f 70       	andi	r25, 0x0F	; 15
	or r24, r25
 5ea:	89 2b       	or	r24, r25
	
	pop r25 //retrieving used registers
 5ec:	9f 91       	pop	r25
	ret
 5ee:	08 95       	ret

000005f0 <LCD_print>:


.global LCD_print
LCD_print:
	push r24
 5f0:	8f 93       	push	r24
	movw XL, r24
 5f2:	dc 01       	movw	r26, r24

000005f4 <LCD_print_loop>:
	
	LCD_print_loop:
		ld r24, x+
 5f4:	8d 91       	ld	r24, X+
		tst r24
 5f6:	88 23       	and	r24, r24
		breq LCD_print_end
 5f8:	11 f0       	breq	.+4      	; 0x5fe <LCD_print_end>
		rcall LCD_data
 5fa:	bc df       	rcall	.-136    	; 0x574 <LCD_data>
		rjmp LCD_print_loop
 5fc:	fb cf       	rjmp	.-10     	; 0x5f4 <LCD_print_loop>

000005fe <LCD_print_end>:

	LCD_print_end:

	pop r24
 5fe:	8f 91       	pop	r24
	ret
 600:	08 95       	ret

00000602 <LCD_clear>:


.global	LCD_clear
LCD_clear:
	push r24
 602:	8f 93       	push	r24
	
	ldi r24, 1
 604:	81 e0       	ldi	r24, 0x01	; 1
	rcall LCD_command
 606:	ad df       	rcall	.-166    	; 0x562 <LCD_command>
	
	pop r24
 608:	8f 91       	pop	r24
	ret
 60a:	08 95       	ret

0000060c <LCD_setDDaddr>:

.global LCD_setDDaddr
LCD_setDDaddr:
	push r24
 60c:	8f 93       	push	r24
	
	ori r24, 0x80
 60e:	80 68       	ori	r24, 0x80	; 128
	rcall LCD_command
 610:	a8 df       	rcall	.-176    	; 0x562 <LCD_command>
	
	pop r24
 612:	8f 91       	pop	r24
	ret
 614:	08 95       	ret

00000616 <LCD_setCGaddr>:

.global LCD_setCGaddr
LCD_setCGaddr:
	push r24
 616:	8f 93       	push	r24
	
	ori r24, 0x40
 618:	80 64       	ori	r24, 0x40	; 64
	rcall LCD_command
 61a:	a3 df       	rcall	.-186    	; 0x562 <LCD_command>
	
	pop r24
 61c:	8f 91       	pop	r24
	ret
 61e:	08 95       	ret

00000620 <LCD_EntryMode>:

.global LCD_EntryMode
LCD_EntryMode:
	push r24
 620:	8f 93       	push	r24
	push r22
 622:	6f 93       	push	r22

	andi r24, 0x02
 624:	82 70       	andi	r24, 0x02	; 2
	andi r22, 1
 626:	61 70       	andi	r22, 0x01	; 1
	or r24,r22
 628:	86 2b       	or	r24, r22
	ori r24, 0x04
 62a:	84 60       	ori	r24, 0x04	; 4
	rcall LCD_command
 62c:	9a df       	rcall	.-204    	; 0x562 <LCD_command>

	pop r22
 62e:	6f 91       	pop	r22
	pop r24
 630:	8f 91       	pop	r24
	ret
 632:	08 95       	ret

00000634 <LCD_DisplayControl>:

.global LCD_DisplayControl
LCD_DisplayControl:
	push r24
 634:	8f 93       	push	r24
	push r22
 636:	6f 93       	push	r22
	push r20
 638:	4f 93       	push	r20

	andi r24, 0x04
 63a:	84 70       	andi	r24, 0x04	; 4
	andi r22, 0x02
 63c:	62 70       	andi	r22, 0x02	; 2
	andi r20, 0x01
 63e:	41 70       	andi	r20, 0x01	; 1
	or r24,r22
 640:	86 2b       	or	r24, r22
	or r24,r20
 642:	84 2b       	or	r24, r20
	ori r24, 0x08
 644:	88 60       	ori	r24, 0x08	; 8
	rcall LCD_command
 646:	8d df       	rcall	.-230    	; 0x562 <LCD_command>

	pop r20
 648:	4f 91       	pop	r20
	pop r22
 64a:	6f 91       	pop	r22
	pop r24
 64c:	8f 91       	pop	r24
	ret
 64e:	08 95       	ret

00000650 <__vector_8>:
#include <avr/interrupt.h>

ISR(TIMER1_OVF_vect)
{

}
 650:	18 95       	reti

00000652 <main>:

int main(void)
{
	LCD_init();
 652:	68 df       	rcall	.-304    	; 0x524 <LCD_init>
	kp_init();
 654:	fd de       	rcall	.-518    	; 0x450 <kp_init>
	TWI_init();
 656:	a9 de       	rcall	.-686    	; 0x3aa <TWI_init>
	
	LCD_DisplayControl(-1,0,0);
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	ea df       	rcall	.-44     	; 0x634 <LCD_DisplayControl>
	LCD_clear();
 660:	d0 df       	rcall	.-96     	; 0x602 <LCD_clear>
	calc_vm();
 662:	60 de       	rcall	.-832    	; 0x324 <calc_vm>
	return 0;
}
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
